<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://rundis.github.io/blog/</link>
    <atom:link href="http://rundis.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sat, 24 Jan 2015 16:08:50 +0100</pubDate>
    <lastBuildDate>Sat, 24 Jan 2015 16:08:50 +0100</lastBuildDate>

    <item>
      <title>Bootifying my ring app</title>
      <link>http://rundis.github.io/blog//2015/bootify-ring.html</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2015/bootify-ring.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_little_background&quot;&gt;A little background&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A few weeks back I noticed a tweet about &lt;a href=&quot;https://github.com/boot-clj/boot&quot;&gt;boot-clj&lt;/a&gt;. This weekend I finally had some time to look into whether it could
be a viable alternative to &lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;Leiningen&lt;/a&gt; for our apps or not.
We have a couple of ring based apps running as uberjars, so I decided to try to make a boot build for one of the projects. For the purpose of this blogpost however
I&amp;#8217;ve created a sample app. Source available on &lt;a href=&quot;https://github.com/rundis/boot-sample&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_bother_with_an_alternative_when_there_is_leiningen&quot;&gt;Why bother with an alternative when there is Leiningen ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I haven&amp;#8217;t been in the clojuresphere all that long.
I do have a history as java and groovy developer and have been through a history of using &lt;a href=&quot;http://ant.apache.org/&quot;&gt;ant&lt;/a&gt;,
&lt;a href=&quot;http://maven.apache.org/&quot;&gt;maven&lt;/a&gt; and lately &lt;a href=&quot;https://www.gradle.org/&quot;&gt;gradle&lt;/a&gt; for my builds.
In terms of development experience Leiningen is definately a step up from all of them. However I feel Leiningen has left me longing
as soon as my builds have become a bit more elaborate (testing javascript, transpiling, create artifacts, upload to repo, run migrations
deploy to different environments etc). I&amp;#8217;m sure all of this is achievable with Lein, but is it really architected to excel for that purpose ?
TBH I&amp;#8217;d love to see gradle get some serious clojure love, but it doesn&amp;#8217;t seem to be coming anytime soon. Maybe boot will be my next build tooling love :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Reading up a bit on boot checked a few boxes for some of my longings though:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your build doesn&amp;#8217;t have to be all declarative&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sensible abstractions and libraries to allow you to compose and extend your build using the full power of clojure&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compose build pipelines somewhat similar to how you would compose middlewares in ring&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task is the fundamental building block&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tasks typically works on immutable filesets (files treated as values, you never touch the filesystem directly yourself !)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Possibility of complete classpath isolation at task level&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Great repl and commandline support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230; and surely a lots more&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lein_boot&quot;&gt;Lein &amp;#8594; Boot&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_leningen_project&quot;&gt;Leningen project&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;project.clj&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint clojure language-clojure&quot;&gt;&lt;code&gt;(defproject boot-sample &quot;0.1.0&quot;
  :description &quot;Boot sample application&quot;
  :url &quot;https://github.com/rundis/boot-sample&quot;
  :min-lein-version &quot;2.0.0&quot;
  :dependencies [[org.clojure/clojure &quot;1.6.0&quot;]
                 [compojure &quot;1.2.1&quot;]
                 [liberator &quot;0.12.2&quot;]
                 [ring/ring-jetty-adapter &quot;1.3.1&quot;]
                 [ring/ring-json &quot;0.3.1&quot;]
                 [bouncer &quot;0.3.1&quot;]
                 [io.aviso/pretty &quot;0.1.14&quot;]]
  :ring {:handler boot-sample.core/app                       &lt;b&gt;(1)&lt;/b&gt;
         :port 3360}
  :profiles {:dev {:plugins [[lein-ring &quot;0.8.13&quot;]]
                   :test-paths ^:replace []}
             :test {:dependencies [[midje &quot;1.6.3&quot;]]
                    :plugins [[lein-midje &quot;3.1.3&quot;]]
                    :test-paths [&quot;test&quot;]
                    :resource-paths [&quot;test/resources&quot;]}})

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The entry point for my ring app&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above project is a really simple project definition. To run my app I just have to execute:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;lein ring uberjar
java -jar target/boot-sample-0.1.0-standalone.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;core.clj&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint clojure language-clojure&quot;&gt;&lt;code&gt;(ns boot-sample.core
  (:require [ring.middleware.params :refer [wrap-params]]
            [ring.middleware.keyword-params :refer [wrap-keyword-params]]
            [ring.middleware.json :refer [wrap-json-params]]
            [compojure.core :refer [defroutes ANY GET]]
            [liberator.core :refer [defresource resource]]))

(defn index-handler [req]
  &quot;Hello Boot sample (or maybe Lein still)&quot;)

(defresource booters
  :available-media-types       [&quot;application/json&quot;]
  :allowed-methods             [:get]
  :handle-ok                   (fn [ctx] [{:id &quot;Pod1&quot;} {:id &quot;Pod 2&quot;}]))

(defroutes app-routes
  (ANY &quot;/&quot; [] index-handler)
  (ANY &quot;/booters&quot; [] booters))


(def app (-&amp;gt; app-routes
             wrap-keyword-params
             wrap-json-params
             wrap-params))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Hey. Hang on. There is no main method here, how can the java -jar command work without one ?
Well, because the ring plugin creates one for us.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;cat target classes/boot_sample/core/main.clj&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;gives us&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint clojure language-clojure&quot;&gt;&lt;code&gt;(do
  (clojure.core/ns boot-sample.core.main
   (:require ring.server.leiningen)
                   (:gen-class))
  (clojure.core/defn -main []
    (ring.server.leiningen/serve
     (quote {:ring {:auto-reload? false,
                    :stacktraces? false,
                    :open-browser? false,
                    :port 3360,
                    :handler boot-sample.core/app}}))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s useful to know in case boot-clj doesn&amp;#8217;t happen to have a ring task that does something similar.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_boot_me_up&quot;&gt;Boot me up&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Boot comes with a range of predefined tasks that I can compose to get quite close to the Leiningen build above.
I&amp;#8217;ll focus on getting that uberjar up and running.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could have done it all on the command line or in the boot repl, but lets just be a little declarative (still functions don&amp;#8217;t worry!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;build.boot&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint clojure language-clojure&quot;&gt;&lt;code&gt;(set-env!
 :resource-paths #{&quot;src&quot;}                                &lt;b&gt;(1)&lt;/b&gt;
 :dependencies &apos;[[org.clojure/clojure &quot;1.6.0&quot;]
                 [compojure &quot;1.2.1&quot;]
                 [liberator &quot;0.12.2&quot;]
                 [ring/ring-jetty-adapter &quot;1.3.1&quot;]
                 [ring/ring-json &quot;0.3.1&quot;]
                 [bouncer &quot;0.3.1&quot;]
                 [io.aviso/pretty &quot;0.1.14&quot;]])

(task-options!
 pom {:project &apos;boot-Sample
      :version &quot;0.1.0&quot;}
 aot {:namespace &apos;#{boot-sample.core}}                  &lt;b&gt;(2)&lt;/b&gt;
 jar {:main &apos;boot_sample.core                           &lt;b&gt;(3)&lt;/b&gt;
      :manifest {&quot;Description&quot; &quot;Sample boot app&quot;
                 &quot;Url&quot; &quot;https://github.com/rundis/boot-sample&quot;}})


(deftask build
  &quot;Build uberjar&quot;
  []
  (comp (aot) (pom) (uber) (jar)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To bundle your sources in the output jar, you have to specify src as a resource-path. A small gotcha there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to aot our core.clj namespace so that java -jar can invoke it&amp;#8217;s main method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We need to help java -jar with the location of our main class in the jar&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However you might remember from above that there is no main method in core.clj.
So the last piece of the puzzle is to add one. It&amp;#8217;t not that hard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint clojure language-clojure&quot;&gt;&lt;code&gt;(ns boot-sample.core
  (:require [ring.middleware.params :refer [wrap-params]]
            [ring.middleware.keyword-params :refer [wrap-keyword-params]]
            [ring.middleware.json :refer [wrap-json-params]]
            [compojure.core :refer [defroutes ANY GET]]
            [liberator.core :refer [defresource resource]]
            [ring.adapter.jetty :as jetty])                                &lt;b&gt;(1)&lt;/b&gt;
  (:gen-class))                                                            &lt;b&gt;(2)&lt;/b&gt;


;; ... the other stuff

(defn -main []
  (jetty/run-jetty app {:port 3360}))                                     &lt;b&gt;(3)&lt;/b&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Using the jetty ring adapter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The :gen-class directive generates the necessary stuff for our main method to be invokable from java
during aot compilation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fire away&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of writing there was a regression in boot that caused aot to fail.
I needed to build boot from source, should be fixed in the next release though.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;git clone git@github.com:boot-clj/boot.git
cd boot/boot/core
lein install&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now all is set to try it out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;boot build
java -jar target/boot-sample-0.1.0.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_all_is_well_then&quot;&gt;All is well then ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately not quite. For uberjar projects it seems boot-clj at the time of writing has some serious
performance challenges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;On my machine generating the uberjar takes:&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leiningen : 12 seconds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;boot-clj  : 46 seconds !&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s not like Leiningen is lightning fast in the first place. But for this scenario boot just doesn&amp;#8217;t cut it.
I reported an &lt;a href=&quot;https://github.com/boot-clj/boot/issues/94&quot;&gt;issue&lt;/a&gt; and got prompt responses from the developers
which can only be a good sign.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_concluding_remarks&quot;&gt;Concluding remarks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My initial question of whether or not I feel we could use boot for our current projects gets a thumbs down for now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I think boot-clj carries a lot of promise and have some really great ideas. It&amp;#8217;s going to be interesting to
see if boot-clj becomes a viable alternative to leiningen. I suppose a porting and/or interop story with lein
and lein plugins might be needed in addition to maturing both the model and obviously its performance characteristics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m certainly keen on trying it out more. I might try out the clojurescript support next and maybe churn out some custom tasks
just for fun.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Groovy Light Table Plugin</title>
      <link>http://rundis.github.io/blog//2014/groovy_repl.html</link>
      <pubDate>Mon, 19 May 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/groovy_repl.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A short demonstration of the repl like capabilities of my Light Table Groovy plugin (&lt;a href=&quot;https://github.com/rundis/LightTable-Groovy&quot;&gt;https://github.com/rundis/LightTable-Groovy&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/5ji8RR2A4gQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Creating and using snippets in Light Table</title>
      <link>http://rundis.github.io/blog//2014/lt-snippets.html</link>
      <pubDate>Tue, 6 May 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/lt-snippets.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A short introduction to my Light Table Snippets plugin (&lt;a href=&quot;https://github.com/rundis/lt-snippets&quot;&gt;https://github.com/rundis/lt-snippets&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/I6iuXOw3HDQ&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JavaScript testing with Light Table and Buster.JS</title>
      <link>http://rundis.github.io/blog//2014/instabuster_part2.html</link>
      <pubDate>Mon, 21 Apr 2014 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2014/instabuster_part2.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second part of the intro to the Light Table Buster plugin (&lt;a href=&quot;https://github.com/busterjs/lt-instabuster&quot;&gt;https://github.com/busterjs/lt-instabuster&lt;/a&gt;)
This time demonstrating some of the more advanced features.&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/jYDiAVbPL8I&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>JavaScript testing with Light Table and Buster.JS</title>
      <link>http://rundis.github.io/blog//2014/instabuster_part1.html</link>
      <pubDate>Mon, 17 Mar 2014 00:00:00 +0100</pubDate>
      <guid isPermaLink="false">2014/instabuster_part1.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intro to the Light Table Buster plugin (&lt;a href=&quot;https://github.com/busterjs/lt-instabuster&quot;&gt;https://github.com/busterjs/lt-instabuster&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://www.youtube.com/embed/WKHWazblpbc&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Javascript testing in your JVM projects using Gradle and BusterJS</title>
      <link>http://rundis.github.io/blog//2013/buster-plugin.html</link>
      <pubDate>Mon, 19 Aug 2013 00:00:00 +0200</pubDate>
      <guid isPermaLink="false">2013/buster-plugin.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When I first started looking at testing in javascript land a while back I quickly felt lost in space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Filled with questions like;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;which framework(s) to choose ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how do I get framework x to work from my IDE ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;more importantly how to I manage to include the javascript tests in my CI builds ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;how can I avoid repetitive setup pain across projects ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;why is it such a hassle getting started ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I can&amp;#8217;t say I have answered any of the questions above fully, but I have taken some strides in the right direction.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_buster_js&quot;&gt;Buster.JS&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.busterjs.org/en/latest/&quot;&gt;Buster&lt;/a&gt; is a flexible and modularized framework for writing and running your JavaScript tests.
There are others out there, but from what I could gather and based on advice from my frontend wizard colleagues I decided to give it a good go. It&amp;#8217;s still in beta, but from my experiences so far its more than mature enough for proper use in projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_a_few_important_aspects_about_buster_js&quot;&gt;A few important aspects about Buster.JS:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tests are run in real browsers (phantomjs for headless). No emulation bull
You can run tests in multiple browsers in parallell
Its really really fast
Write tests in the fashion that suits you (xUnit or spec)
Nice assertion library and integrated with Sinon.JS (powerful stubbing and spying)
&amp;#8230; and lots more&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gradle_buster_plugin&quot;&gt;Gradle buster plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For my jvm project builds I use Gradle. Maven and Ant projects that spend time with me a few weeks tend to find themselves converted. So I set out to create a buster plugin for gradle, aptly named gradle-buster-plugin. Still early days, but already it has started to prove quite valuable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;The plugin has two high-level goals;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow you to easily run javascripts as part of your CI builds&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide you with a smooth development experience by adding value on top of whats already present in Buster.JS.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The homepage for the pluging is here: &lt;a href=&quot;https://github.com/rundis/gradle-buster-plugin&quot;&gt;https://github.com/rundis/gradle-buster-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_what_do_i_have_to_do_aka_getting_started&quot;&gt;What do I have to do ? (aka getting started)&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_installing_preconditions&quot;&gt;Installing preconditions&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install node.js/npm - Mac: $ brew install node&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Buster.JS  - $ npm install buster -g&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Phantom.JS  - Mac: $ brew install phantomjs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_set_up_the_buster_plugin_in_your_gradle_config&quot;&gt;Set up the buster plugin in your gradle config&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint groovy language-groovy&quot;&gt;&lt;code&gt;buildscript {
    repositories { jcenter() }
    dependencies {
        classpath  &apos;org.gradle.buster:gradle-buster-plugin:0.2.4.1&apos;
    }
}

apply plugin: &apos;war&apos; // just assuming you have a war project
apply plugin: &apos;buster&apos;

build.dependsOn busterTest // hook up javascript task in the build&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_set_up_a_buster_js_configuration_file&quot;&gt;Set up a buster.js configuration file&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint javascript language-javascript&quot;&gt;&lt;code&gt;var config = module.exports;

config[&quot;Sample JSTests&quot;] = {
    environment: &quot;browser&quot;,

    libs: [&quot;src/main/webaapp/js/libs/jquery-1.10.2.js&quot;],
    sources: [&quot;src/main/web-app/js/app/**/*.js&quot;],
    tests: [&quot;src/test/js/**/*-test.js&quot;]
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sample_unit&quot;&gt;Sample unit&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So you could create a file like src/main/webapp/js/app/dummy-service.js&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint javascript language-javascript&quot;&gt;&lt;code&gt;var myapp = this.myapp || {};
myapp.services = app.services || {};
(function () {
    myapp.services.DummyService = function (my) {
        my.listTodos = function(success, error) {
            $.get(&apos;/todos/list&apos;)
               .done(function(data) {
                  success(data);
               })
               .fail(function(jqXHR, textStatus, errorThrown) {
                  error(&quot;Error getting todos&quot;)
               });
        };
        return my;
    }(myapp.services.DummyService || {});
}());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sample_unit_test&quot;&gt;Sample unit test&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a corresponding unit test in src/test/js/app/dummy-service-test.js&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint javascript language-javascript&quot;&gt;&lt;code&gt;(function () {
    buster.testCase(&quot;DummyService&quot;, {
        setUp: function() {
            this.service = myapp.services.DummyService;
            this.server = sinon.fakeServer.create();
            this.success = this.spy();
            this.error = this.spy();
        },
        tearDown: function () {
            this.server.restore();
        },
        &quot;should successfully list todos&quot;: function () {
            this.service.listTodos(this.success, this.error);
            this.server.requests[0].respond(
                200,
                { &quot;Content-Type&quot;: &quot;application/json&quot; },
                JSON.stringify([{ id: 1, text: &quot;Provide examples&quot;, done: true }])
            );

            assert.calledOnce(this.success);
        },
        &quot;should invoke error callback on errors&quot;: function () {
            this.service.listTodos(this.success, this.error);
            this.server.requests[0].respond(
                500,
                { &quot;Content-Type&quot;: &quot;application/json&quot; },
                JSON.stringify([{ id: 1, text: &quot;dummy&quot;, done: true }])
            );

            assert.calledOnce(this.error);
        }
    });
}());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_running_the_tests_locally&quot;&gt;Running the tests locally&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;$ gradle busterTest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Test results are found in : build/busterTest-results/bustertests.xml&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Autotesting
When doing your tdd cycles its quite useful to use the autotest feature (kinda like infinitest).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint bash language-bash&quot;&gt;&lt;code&gt;$ gradle busterAutoTest&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Will leave the server running and listen for file changes in the patterns specified by the buster.js file above. So if I change the test or unit above a test run will automatically be fired off and results reported to the console. Its pretty fast so you should be able to keep a good flow going !
Just do Ctrl + C to kill the autotesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Multiple browsers
Its quite easy to set up just see the readme for the plugin&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CI Server
Obviously you will need to set up the preconditions. If you&amp;#8217;re server isn&amp;#8217;t headless you have the option of testing with a few proper browsers(firefox and chrome on linux, safari if your server is mac&amp;#8230; which I doubt).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its certainly not perfect, but with the above you have a pretty good start. Once you get over the hurdle of setting up the preconditions it really is quite pleasant to work with. You should be amazed by the performance of the tests runs if you are from a jvm background.
What about IDE integration ? With the autotest feature I can&amp;#8217;t say I have missed it much. I have my IDE and a visible console available and get instant feedback on saves in my IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Smooth !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
